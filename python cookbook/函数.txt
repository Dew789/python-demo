1.可接受任意数量参数的函数
    """
    一个*参数只能出现在函数定义中最后一个位置参数后面，
    但在*参数后面仍然可以定义强制关键字参数，而 **参数只能出现在最后一个参数
    """
    def anyargs(*args, **kwargs):
        print(args) # A tuple
        print(kwargs) # A dict

2.只接受关键字参数的函数
    # 强制关键字参数
    def recv(maxsize, *, block)
    # 在接受任意多个位置参数的函数中指定关键字参数
    def mininum(*values, clip=None):
        m = min(values)
        if clip is not None:
        m = clip if clip > m else m
        return m

3.给函数参数增加元信息
    # 给函数添加注解，便于阅读源码
    def add(x:int, y:int) -> int:
        return x + y
    函数注解只存储在函数的 __annotations__ 属性中
    add.__annotations__

4.返回多个值的函数
    # 返回元组

5.定义有默认参数的函数
    """
    注意到当我们改变x的值的时候对默认参数值并没有影响，这是因为在函数定义的时候就
    已经确定了它的默认值了
    """
    >>> x = 42
    >>> def spam(a, b=x):
    ... print(a, b)
    ...
    >>> spam(1)
    1 42
    >>> x = 23 # Has no effect
    >>> spam(1)
    1 42
    >>>

6.定义匿名或内联函数
    # lambda表达式

7.匿名函数捕获变量值
    """
    这其中的奥妙在于lambda表达式中的x是一个自由变量， 在运行时绑定值，而不是定义时
    就绑定，这跟函数的默认值参数定义是不同的
    """
    >>> x = 10
    >>> a = lambda y: x + y
    >>> x = 20
    >>> b = lambda y: x + y
    >>> a(10)
    30
    >>> b(10)
    30
    >>>
    # 如果想让匿名函数定义时就捕获到值
    >>> x = 10
    >>> a = lambda y, x=x: x + y
    >>> x = 20
    >>> b = lambda y, x=x: x + y
    >>> a(10)
    20
    >>> b(10)
    30
    # Wrong：funcs = [lambda x: x+n for n in range(5)]
    # Correct：funcs = [lambda x, n=n: x+n for n in range(5)]

8.减少可调用对象的参数个数
    # 偏函数
    >>> from functools import partial
    >>> s1 = partial(spam, 1) # a = 1
    >>> s1(2, 3, 4)
    1 2 3 4
    >>> s1(4, 5, 6)
    1 4 5 6
    >>> s2 = partial(spam, d=42) # d = 42
    >>> s2(1, 2, 3)
    1 2 3 42
    >>> s2(4, 5, 5)
    4 5 5 42
    >>> s3 = partial(spam, 1, 2, d=42) # a = 1, b = 2, d = 42
    >>> s3(3)
    # 本节要解决的问题是让原本不兼容的代码可以一起工作
    points = [ (1, 2), (3, 4), (5, 6), (7, 8) ]
    import math
    def distance(p1, p2):
        x1, y1 = p1
        x2, y2 = p2
        return math.hypot(x2 - x1, y2 - y1)
    >>> pt = (4, 3)
    >>> points.sort(key=partial(distance,pt))
    >>> points
    [(3, 4), (1, 2), (5, 6), (7, 8)]
    >>>

9.将单方法的类转换为函数
    # 类
    from urllib.request import urlopen
    class UrlTemplate:
        def __init__(self, template):
            self.template = template
        def open(self, **kwargs):
            return urlopen(self.template.format_map(kwargs))

    # Example use. Download stock data from yahoo
    yahoo = UrlTemplate('http://finance.yahoo.com/d/quotes.csv?s={names}&f={fields}')
    for line in yahoo.open(names='IBM,AAPL,FB', fields='sl1c1v'):
        print(line.decode('utf-8'))
    # 转换为闭包函数
    def urltemplate(template):
        def opener(**kwargs):
            return urlopen(template.format_map(kwargs))
        return opener
    # Example use
    yahoo = urltemplate('http://finance.yahoo.com/d/quotes.csv?s={names}&f={fields}')
    for line in yahoo(names='IBM,AAPL,FB', fields='sl1c1v'):
        print(line.decode('utf-8'))

10.带额外状态信息的回调函数
    def apply_async(func, args, *, callback):
        # Compute the result
        result = func(*args)
        # Invoke the callback with the result
        callback(result)
    def add(x, y):
        return x + y
    # 方案一，使用类
    class ResultHandler:
        def __init__(self):
            self.sequence = 0
        def handler(self, result):
            self.sequence += 1
            print('[{}] Got: {}'.format(self.sequence, result))
    >>> r = ResultHandler()
    >>> apply_async(add, (2, 3), callback=r.handler)
    [1] Got: 5
    >>> apply_async(add, ('hello', 'world'), callback=r.handler)
    [2] Got: helloworld
    # 方案二，闭包
    def make_handler():
        sequence = 0
        def handler(result):
            nonlocal sequence
            sequence += 1
            print('[{}] Got: {}'.format(sequence, result))
        return handler
    # 方案三，协程
    def make_handler():
        sequence = 0
        while True:
            result = yield
            sequence += 1
            print('[{}] Got: {}'.format(sequence, result))
    >>> handler = make_handler()
    >>> next(handler) # Advance to the yield
    >>> apply_async(add, (2, 3), callback=handler.send)
    [1] Got: 5
    >>> apply_async(add, ('hello', 'world'), callback=handler.send)
    [2] Got: helloworld

11.内联回调函数
    """
    def apply_async(func, args, *, callback):
        # Compute the result
        result = func(*args)
        # Invoke the callback with the result
        callback(result)

    from queue import Queue
    from functools import wraps
    class Async:
        def __init__(self, func, args):
            self.func = func
            self.args = args
    
    def inlined_async(func):
        @wraps(func)
        def wrapper(*args):
            f = func(*args)
            result_queue = Queue()
            result_queue.put(None)
            while True:
                result = result_queue.get()
                try:
                    a = f.send(result)
                    apply_async(a.func, a.args, callback=result_queue.put)
                except StopIteration:
                    break
        return wrapper
    
    def add(x, y):
        return x + y

    @inlined_async
    def test():
        r = yield Async(add, (2, 3))
        print(r)
        r = yield Async(add, ('hello', 'world'))
        print(r)
        for n in range(10):
            r = yield Async(add, (n, n))
            print(r)
        print('Goodbye')
    
    if __name__ == '__main__':
        import multiprocessing
        pool = multiprocessing.Pool()
        apply_async = pool.apply_async
        # Run the test function
        test()
        """
    
12.访问闭包中定义的变量
    