1.手动遍历迭代器
    def manual_iter():
        with open('/etc/passwd') as f:
        try:
            while True:
                line = next(f)
                print(line, end='')
        except StopIteration:
            pass

2.代理迭代
    # 实际上你只需要定义一个 __iter__() 方法，将迭代操作代理到容器内部的对象上去
    class Node:
        def __init__(self, value):
            self._value = value
            self._children = []
        def __repr__(self):
            return 'Node({!r})'.format(self._value)
        def add_child(self, node):
            self._children.append(node)
        def __iter__(self):
            return iter(self._children)

3.使用生成器创建新的迭代模式
    # 如果你想实现一种新的迭代模式，使用一个生成器函数来定义它。
    def frange(start, stop, increment):
        x = start
        while x < stop:
            yield x
            x += increment

4.实现迭代器协议
    """
    使用Node类来表示树形数据结构。你可能想实现一个以深度优先
    方式遍历树形节点的生成器
    """
    class Node:
        def __init__(self, value):
            self._value = value
            self._children = []
        def __repr__(self):
            return 'Node({!r})'.format(self._value)
        def add_child(self, node):
            self._children.append(node)
        def __iter__(self):
            return iter(self._children)
        def depth_first(self):
            yield self
            for c in self:
                yield from c.depth_first()
        # Example
        if __name__ == '__main__':
            root = Node(0)
            child1 = Node(1)
            child2 = Node(2)
            root.add_child(child1)
            root.add_child(child2)
            child1.add_child(Node(3))
            child1.add_child(Node(4))
            child2.add_child(Node(5))
            for ch in root.depth_first():
            print(ch)
            # Outputs Node(0), Node(1), Node(3), Node(4), Node(2), Node(5)
    还可以通过__next__()方法实现

5.反向迭代
    """
    定义一个反向迭代器可以使得代码非常的高效， 因为它不再需要将数据填充到一个列表
    中然后再去反向迭代这个列表
    """
    class Countdown:
        def __init__(self, start):
            self.start = start
        # Forward iterator
        def __iter__(self):
            n = self.start
            while n > 0:
                yield n
                n -= 1
        # Reverse iterator
        def __reversed__(self):
            n = 1
            while n <= self.start:
                yield n
                n += 1

        for rr in reversed(Countdown(30)):
            print(rr)
        for rr in Countdown(30):
            print(rr)

6.带有外部状态的生成器函数
    # 一个需要注意的小地方是，如果你在迭代操作时不使用for循环语句，
    那么你得先调用iter()函数
    from collections import deque
    class linehistory:
        def __init__(self, lines, histlen=3):
            self.lines = lines
            self.history = deque(maxlen=histlen)

        def __iter__(self):
            for lineno, line in enumerate(self.lines, 1):
                self.history.append((lineno, line))
                yield line

        def clear(self):
            self.history.clear()

    with open('somefile.txt') as f:
        lines = linehistory(f)
        for line in lines:
            if 'python' in line:
        for lineno, hline in lines.history:
            print('{}:{}'.format(lineno, hline), end='')

7.迭代器切片
    # 函数 itertools.islice() 正好适用于在迭代器和生成器上做切片操作
    >>> def count(n):
    ...     while True:
    ...         yield n
    ...         n += 1
    ...
    >>> c = count(0)
    >>> c[10:20]
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: 'generator' object is not subscriptable
    >>> # Now using islice()
    >>> import itertools
    >>> for x in itertools.islice(c, 10, 20):
            print(x)
    """
    这里要着重强调的一点是 islice() 会消耗掉传入的迭代器中的数据。 必须考虑到迭代器
    是不可逆的这个事实。 所以如果你需要之后再次访问这个迭代器的话，那你就得先将它
    里面的数据放入一个列表中
    """

8.跳过可迭代对象的开始部分
    # 如果你想跳过开始部分的注释行的话，可以这样做
    >>> from itertools import dropwhile
    >>> with open('/etc/passwd') as f:
    ...     for line in dropwhile(lambda line: line.startswith('#'), f):
    ...     print(line, end='')
    ...
    nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
    root:*:0:0:System Administrator:/var/root:/bin/sh
    ...
    # 如果已经明确知道了要跳过的元素的个数，可以使用 itertools.islice()
    >>> from itertools import islice
    >>> items = ['a', 'b', 'c', 1, 4, 10, 15]
    >>> for x in islice(items, 3, None):
    ... print(x)
    ...
    1 4 1
    0
    15
    # 对可迭代对象设定条件
    with open('/etc/passwd') as f:
        lines = (line for line in f if not line.startswith('#'))
        for line in lines:
            print(line, end='')

9.排列组合的迭代
    # 你想迭代遍历一个集合中元素的所有可能的排列或组合
    itertools.permutations()
    itertools.combinations()
    itertools.combinations_with_replacement()

10.序列上索引值迭代
    enumerate(iterable, index)
    data = [ (1, 2), (3, 4), (5, 6), (7, 8) ]
    # Correct!
    for n, (x, y) in enumerate(data):
    ...
    # Error!
    for n, x, y in enumerate(data):
    ...

11.同时迭代多个序列
    itertools.zip_longest(fillvalue="")
    zip()
    headers = ['name', 'shares', 'price']
    values = ['ACME', 100, 490.1]
    s = dict(zip(headers,values))
    for name, val in zip(headers, values):
        print(name, '=', val)
    """
    虽然不常见，但是 zip() 可以接受多于两个的序列的参数。 
    这时候所生成的结果元组中元素个数跟输入序列个数一样
    """

12 不同集合上元素的迭代
    """
    itertools.chain() 接受一个或多个可迭代对象最为输入参数。 
    然后创建一个迭代器，依次连续的返回每个可迭代对象中的元素
    """

13.创建数据处理管道
    # 使用生成器处理多个文件的方法
    import fnmatch

14.展开嵌套的序列
    from collections import Iterable
    def flatten(items, ignore_types=(str, bytes)):
        for x in items:
            if isinstance(x, Iterable) and not isinstance(x, ignore_types):
                yield from flatten(x)
        else:
            yield x
        items = [1, 2, [3, 4, [5, 6], 7], 8]
    # Produces 1 2 3 4 5 6 7 8
    for x in flatten(items):
        print(x)

15.顺序迭代合并后的排序迭代对象
    """
    heapq.merge 可迭代特性意味着它不会立马读取所有序列。 
    这就意味着你可以在非常长的序列中使用它，而不会有太大的开销。
    有一点要强调的是 heapq.merge() 需要所有输入序列必须是排过序的。 
    特别的，它并不会预先读取所有数据到堆栈中或者预先排序，也不会对
    输入做任何的排序检测。 它仅仅是检查所有序列的开始部分并返回最小
    的那个，这个过程一直会持续直到所有输入序列中的元素都被遍历完。
    """

16.迭代器代替while无限循环
    """
    iter 函数一个鲜为人知的特性是它接受一个可选的 callable 对象和一个标记(结尾)值作
    为输入参数。 当以这种方式使用的时候，它会创建一个迭代器， 这个迭代器会不断调用
    callable 对象直到返回值和标记值相等为止。
    """
    CHUNKSIZE = 8192
    def reader(s):
        while True:
            data = s.recv(CHUNKSIZE)
            if data == b'':
                break
        process_data(data)
    def reader2(s):
        for chunk in iter(lambda: s.recv(CHUNKSIZE), b''):
            pass
            # process_data(data)
