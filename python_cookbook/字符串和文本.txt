1.使用多个界定符分割字符串
    # 使用正则表达式的分割方法
    >>> line = 'asdf fjdk; afed, fjek,asdf, foo'
    >>> import re
    >>> re.split(r'[;,\s]\s*', line)
    ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']
    >>> fields = re.split(r'(;|,|\s)\s*', line)
    >>> fields
    ['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']
    >>>

2.字符串开头或结尾匹配
    >>> import os
    >>> filenames = os.listdir('.')
    >>> filenames
    [ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ]
    >>> [name for name in filenames if name.endswith(('.c', '.h')) ]
    ['foo.c', 'spam.c', 'spam.h'
    >>> any(name.endswith('.py') for name in filenames)
    True

3.用Shell通配符匹配字符串
    # fnmatch根据操作系统的大小写敏感规则, fnmatchcase强制大小写敏感
    '''
    fnmatch() 函数匹配能力介于简单的字符串方法和强大的正则表达式之间。 如果在数据处
    理操作中只需要简单的通配符就能完成的时候，这通常是一个比较合理的方案
    '''
    >>> from fnmatch import fnmatch, fnmatchcase
    >>> fnmatch('foo.txt', '*.txt')
    True
    >>> fnmatch('foo.txt', '?oo.txt')
    True
    >>> fnmatch('Dat45.csv', 'Dat[0-9]*')
    True
    >>> names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py']
    >>> [name for name in names if fnmatch(name, 'Dat*.csv')]
    ['Dat1.csv', 'Dat2.csv']

4.字符串匹配与搜索
    re.finditer()
    str.find()
    str.endswith()
    str.startswith()
    '''
    如果你打算做大量的匹配和搜索操作的话，最好先编译正则表达式，
    然后再重复使用它。 模块级别的函数会将最近编译过的模式缓存起来，因此并不会消耗
    太多的性能，但是如果使用预编译模式的话，你将会减少查找和一些额外的处理损耗
    '''

5.字符串搜索和替换
    str.replace()
    re.sub()
    >>> text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
    >>> import re
    >>> re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text)
    'Today is 2012-11-27. PyCon starts 2013-3-13.'
    >>>

6.字符串忽略大小的搜索替换
    # 正则表达式忽略大小写的表值参数re.IGNORECASE
    >>> text = 'UPPER PYTHON, lower python, Mixed Python'
    >>> re.findall('python', text, flags=re.IGNORECASE)
    ['PYTHON', 'python', 'Python']
    >>> re.sub('python', 'snake', text, flags=re.IGNORECASE)
    'UPPER snake, lower snake, Mixed snake'
    # 使用辅助函数使替换的字符串与被替换字符串大小保持一致
    def matchcase(word):
        def replace(m):
            text = m.group()
            if text.isupper():
                return word.upper()
            elif text.islower():
                return word.lower()
            elif text[0].isupper():
                return word.capitalize()
            else:
                return word
        return replace
    >>> re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE)
        'UPPER SNAKE, lower snake, Mixed Snake'
    # matchcase('snake') 返回了一个回调函数(参数必须是 match 对象)

7.最短匹配模式
    # 贪婪模式？

8.多行匹配模式
    # 采用自定义的方法或者使用多行匹配模式
    (.|\n) re.DOTALL

9.将Unicode文本标准化
    # 在unicode中， 一些字符串有多个合法的编码方式
    >>> s1 = 'Spicy Jalape\u00f1o'
    >>> s2 = 'Spicy Jalapen\u0303o'
    >>> s1
    'Spicy Jalapeño'
    >>> s2
    'Spicy Jalapeño'
    >>> s1 == s2
    False
    # 可以使用unicodedata模块先将文本标准化
    # NFC NFD NFKC NFKD
    >>> import unicodedata
    >>> t1 = unicodedata.normalize('NFC', s1)
    >>> t2 = unicodedata.normalize('NFC', s2)

10. 在正则中使用unicode
    """
    混合使用Unicode和正则表达式通常会让你抓狂。 如果你真的打算这样做的话，最好考虑
    下安装第三方正则式库， 它们会为Unicode的大小写转换和其他大量有趣特性提供全面的
    支持，包括模糊匹配
    """
    >>> import re
    >>> num = re.compile('\d+')
    >>> # ASCII digits
    >>> num.match('123')
    <_sre.SRE_Match object at 0x1007d9ed0>
    >>> # Arabic digits
    >>> num.match('\u0661\u0662\u0663')
    <_sre.SRE_Match object at 0x101234030>

11.删除字符串中不需要的字符
    # replace() strip()
    """
    在这里，表达式 lines = (line.strip() for line in f) 执行数据转换操作。 这种方式非常
    高效，因为它不需要预先读取所有数据放到一个临时的列表中去。 它仅仅只是创建一个
    生成器，并且每次返回行之前会先执行strip操作。
    """
    with open(filename) as f:
        lines = (line.strip() for line in f)
        for line in lines:
        print(line)

12.审查清理文本字符串
    # translate()
    >>> remap = {
    ... ord('\t') : ' ',
    ... ord('\f') : ' ',
    ... ord('\r') : None # Deleted
    ... }
    >>> a = s.translate(remap)
    >>> a
    'pýtĥöñ is awesome\n'
    """
    通过使用 dict.fromkeys() 方法构造一个字典，每个Unicode和音符作为
    键，对于的值全部为 None 。
    然后使用 unicodedata.normalize() 将原始输入标准化为分解形式字符。 然后再调用
    translate 函数删除所有重音符。 同样的技术也可以被用来删除其他类型的字符(比如控
    制字符等)
    """
    >>> import unicodedata
    >>> import sys
    >>> cmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode)
    ... if unicodedata.combining(chr(c)))
    ...
    >>> b = unicodedata.normalize('NFD', a)
    >>> b
    'pýtĥöñ is awesome\n'
    >>> b.translate(cmb_chrs)
    'python is awesome\n'
    >>>

13.字符串对齐
    # ljust() , rjust() 和 center()
    # 使用函数fromat来对齐字符串
    >>> format(text, '>20')
    ' Hello World'
    >>> format(text, '<20')
    'Hello World '
    >>> format(text, '^20')
    ' Hello World '
    >>> format(text, '=>20s')
    '=========Hello World'
    >>> format(text, '*^20s')
    '****Hello World*****'
    >>> '{:>10s} {:>10s}'.format('Hello', 'World')
    ' Hello World'
    """
    format() 函数的一个好处是它不仅适用于字符串。它可以用来格式化任何值，使得它非
    常的通用
    """
    >>> x = 1.2345
    >>> format(x, '>10')
    ' 1.2345'
    >>> format(x, '^10.2f')
    ' 1.23 '
    >>>

14.合并拼接字符串
    # 使用join()， '+'合并字符串
    print(a + ':' + b + ':' + c) # Ugly
    print(':'.join([a, b, c])) # Still ugly
    print(a, b, c, sep=':') # Better
    # IO与字符串拼接的混合操作
    def combine(source, maxsize):
        parts = []
        size = 0
        for part in source:
            parts.append(part)
            size += len(part)
            if size > maxsize:
                yield ''.join(parts)
                parts = []
                size = 0
            yield ''.join(parts)

        # 结合文件操作
        with open('filename', 'w') as f:
            for part in combine(sample(), 32768):
                f.write(part)

15.字符串中插入变量
    # format() format_map()
    >>> s = '{name} has {n} messages.'
    >>> name = 'Guido'
    >>> n = 37
    >>> s.format_map(vars())
    'Guido has 37 messages.'
    >>>

    >>> class Info:
    ... def __init__(self, name, n):
    ... self.name = name
    ... self.n = n
    ...
    >>> a = Info('Guido',37)
    >>> s.format_map(vars(a))
    'Guido has 37 messages.'
    >>>s

    import sys
    def abc():
        print(sys._getframe().f_code.co_filename)  #当前文件名，可以通过__file__获得  
        print(sys._getframe().f_code.co_name)  #当前函数名  
        print(sys._getframe().f_lineno)#当前行号

16.制定列宽格式化字符串
    # textwrap
    textwrap.fill(s, 40, initial_indent=' ')
    textwrap.fill(s, 40, subsequent_indent=' ')

17.在字符串中处理html和xml
    """
    在生成HTML或者XML文本的时候，如果正确的转换特殊标记字符是一个很容易被忽视的
    细节。 特别是当你使用 print() 函数或者其他字符串格式化来产生输出的时候。 使用像
    html.escape() 的工具函数可以很容易的解决这类问题。
    如果你想以其他方式处理文本，还有一些其他的工具函数比如
    xml.sax.saxutils.unescapge() 可以帮助你。 然而，你应该先调研清楚怎样使用一个合适
    的解析器。 比如，如果你在处理HTML或XML文本， 使用某个解析模块比如 html.parse
    或 xml.etree.ElementTree 已经帮你自动处理了相关的替换细节.
    """

18.字符串令牌解析
	import re
	NAME = r'(?P<NAME>[a-zA-Z_][a-zA-Z_0-9]*)'
	NUM = r'(?P<NUM>\d+)'
	PLUS = r'(?P<PLUS>\+)'
	TIMES = r'(?P<TIMES>\*)'
	EQ = r'(?P<EQ>=)'
	WS = r'(?P<WS>\s+)'
	master_pat = re.compile('|'.join([NAME, NUM, PLUS, TIMES, EQ, WS]))

	def generate_tokens(pat, text):
		Token = namedtuple('Token', ['type', 'value'])
		scanner = pat.scanner(text)
		for m in iter(scanner.match, None):
			yield Token(m.lastgroup, m.group())
	# Example use
	for tok in generate_tokens(master_pat, 'foo = 42'):
		print(tok)

19.实现一个简单的递归下降分析器
	
    