1.读写文本数据
    """
    当读取一个未知编码的文本时使用latin-1编码永远不会产生解码错误。
    使用latin-1编码读取一个文件的时候也许不能产生完全正确的文本解码
    数据， 但是它也能从中提取出足够多的有用数据。同时，如果你之后将
    数据回写回去，原先的数据还是会保留的
    """
    >>> # Newline translation enabled (the default)
    >>> f = open('hello.txt', 'rt')
    >>> f.read()
    'hello world!\n'
    >>> # Newline translation disabled
    >>> g = open('hello.txt', 'rt', newline='')
    >>> g.read()
    'hello world!\r\n'
    >>>
    在Unix和Windows中是不一样的(分别是n和rn)。 默认情况下，Python会
    以统一模式处理换行符。 这种模式下，在读取文本的时候，Python可以
    识别所有的普通换行符并将其转换为单个 \n 字符。 类似的，在输出时会将
    换行符 \n 转换为系统默认的换行符。
    >>> # Replace bad chars with Unicode U+fffd replacement char
    >>> f = open('sample.txt', 'rt', encoding='ascii', errors='replace')
    >>> f.read()
    'Spicy Jalape?o!'
    >>> # Ignore bad chars entirely
    >>> g = open('sample.txt', 'rt', encoding='ascii', errors='ignore')
    >>> g.read()
    'Spicy Jalapeo!'
    >>>

2.打印输出至文件中
    with open('d:/work/test.txt', 'wt') as f:
        print('Hello World!', file=f)

3.使用其他分隔符或行终止符打印
    可以使用在 print() 函数中使用 sep 和 end 关键字参数，以你想要的方式输出

4.读写字节数据
    """
    在读取二进制数据的时候，字节字符串和文本字符串的语义差异可能会导致一个潜在的陷
    阱。
    """
    >>> # Byte string
    >>> b = b'Hello World'
    >>> b[0]
    72
    >>> for c in b:
    ... print(c)
    ...
    72
    101
    108
    108
    111
    ..
    如果你想从二进制模式的文件中读取或写入文本数据，必须确保要进行解码和编码操作。
    with open('somefile.bin', 'rb') as f:
        data = f.read(16)
        text = data.decode('utf-8')
    with open('somefile.bin', 'wb') as f:
        text = 'Hello World'
        f.write(text.encode('utf-8'))
    二进制I/O还有一个鲜为人知的特性就是数组和C结构体类型能直接被写入，而不需要中
    import array
    nums = array.array('i', [1, 2, 3, 4])
    with open('data.bin','wb') as f:
        f.write(nums)
    很多对象还允许通过使用文件对象的 readinto() 方法直接读取二进制数据到其底层的内
    存中去

5.文件不存在才能写入
    >>> with open('somefile', 'xt') as f:
        f.write('Hello\n')

    >>> import os
    >>> if not os.path.exists('somefile'):
    ... with open('somefile', 'wt') as f:
    ... f.write('Hello\n')
    ... else:
    ... print('File already exists!')
    ...
    File already exists!
    >>>

6.字符串的I/O操作
    使用 io.StringIO() 和 io.BytesIO() 类来创建类文件对象操作字符串数据
    >>> s = io.StringIO()
    >>> s.write('Hello World\n')
    12
    >>> print('This is a test', file=s)
    15
    >>> # Get all of the data written so far
    >>> s.getvalue()
    'Hello World\nThis is a test\n'
    >>>
    >>> # Wrap a file interface around an existing string
    >>> s = io.StringIO('Hello\nWorld\n')
    >>> s.read(4)
    'Hell'
    >>> s.read()
    'o\nWorld\n'
    >>>
    需要注意的是， StringIO 和 BytesIO 实例并没有正确的整数类型的文件描述符。 因此，
    它们不能在那些需要使用真实的系统级文件如文件，管道或者是套接字的程序中使用

7.读写压缩文件
    # 你想读写一个gzip或bz2格式的压缩文件
    # gzip compression
    import gzip
    with gzip.open('somefile.gz', 'rt') as f:
        text = f.read()
    # bz2 compression
    import bz2
    with bz2.open('somefile.bz2', 'rt') as f:
        text = f.read()
    # gzip compression
    import gzip
    with gzip.open('somefile.gz', 'wt') as f:
        f.write(text)
    # bz2 compression
    import bz2
    with bz2.open('somefile.bz2', 'wt') as f:
        f.write(text)
    默认的等级是9，也是最高的压缩等级。等级越低性能越好，但是数据压缩程度也越低
    with gzip.open('somefile.gz', 'wt', compresslevel=5) as f:
        f.write(text)

8.固定大小记录的文件迭代
    from functools import partial
    RECORD_SIZE = 32
    with open('somefile.data', 'rb') as f:
        records = iter(partial(f.read, RECORD_SIZE), b'')
        for r in records:
            ...

9.读取二进制数据到可变缓冲区中
    """
    和普通 read() 方法不同的是,readinto() 填充已存在的
    缓冲区而不是为新对象重新分配内存再返回它们。 因此，
    你可以使用它来避免大量的内存分配操作
    """
    import os.path
    def read_into_buffer(filename):
        buf = bytearray(os.path.getsize(filename))
        with open(filename, 'rb') as f:
            f.readinto(buf)
            return buf
    memoryview ，它可以通过零复制的方式对已存在的缓冲区执行
    切片操作，甚至还能修改它的内容
    record_size = 32 # Size of each record (adjust value)
    buf = bytearray(record_size)
    with open('somefile', 'rb') as f:
        while True:
            n = f.readinto(buf)
            if n < record_size:
                break
    >>> buf
    bytearray(b'Hello World')
    >>> m1 = memoryview(buf)
    >>> m2 = m1[-5:]
    >>> m2
    <memory at 0x100681390>
    >>> m2[:] = b'WORLD'
    >>> buf
    bytearray(b'Hello WORLD')
    >>>

10.内存映射的二进制文件
    # 你想内存映射一个二进制文件到一个可变字节数组中
    import os
    import mmap
    def memory_map(filename, access=mmap.ACCESS_WRITE):
        size = os.path.getsize(filename)
        fd = os.open(filename, os.O_RDWR)
        return mmap.mmap(fd, size, access=access)
    >>> size = 1000000
    >>> with open('data', 'wb') as f:
    ... f.seek(size-1)
    ... f.write(b'\x00')
    >>> m = memory_map('data')
    >>> len(m)
    1000000
    >>> m[0:10]
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    >>> m[0]
    0 >
    >> # Reassign a slice
    >>> m[0:11] = b'Hello World'
    >>> m.close()
    >>> # Verify that changes were made
    >>> with open('data', 'rb') as f:
    ... print(f.read(11))
    ...
    b'Hello World'
    >>>
    mmap.ACCESS_READ,任何的修改内容都会复制回原来的文件中
    mmap.ACCESS_COPY,如果你想在本地修改数据，但是又不想将修改写回到原始文件中

11.文件路径名的操作
    # os.path模块

12.测试文件是否存在
    os.path.exists 文件或目录是否存在
    os.path.isfile
    os.path.isdir
    os.path.islink  # Is a symbolic link
    os.path.realpath # Get the file linked to
    获取元数据
    os.path.getsize
    os.path.getmtime

13.获取文件夹中的文件列表
import os.path
    # Get all regular files
    names = [name for name in os.listdir('somedir')
             if os.path.isfile(os.path.join('somedir', name))]
    # Get all dirs
    dirnames = [name for name in os.listdir('somedir')
                if os.path.isdir(os.path.join('somedir', name))]

    pyfiles = [name for name in os.listdir('somedir')
                if name.endswith('.py')]

    import glob
        pyfiles = glob.glob('somedir/*.py')
    from fnmatch import fnmatch
        pyfiles = [name for name in os.listdir('somedir')
                    if fnmatch(name, '*.py')]

    # Example of getting a directory listing
    import os
    import os.path
    import glob
    pyfiles = glob.glob('*.py')
    # Get file sizes and modification dates
    name_sz_date = [(name, os.path.getsize(name), os.path.getmtime(name))
                    for name in pyfiles]
    for name, size, mtime in name_sz_date:
        print(name, size, mtime)
    # Alternative: Get file metadata
    file_metadata = [(name, os.stat(name)) for name in pyfiles]
    for name, meta in file_metadata:
        print(name, meta.st_size, meta.st_mtime)

14 忽略文件名编码
    默认情况下，所有的文件名都会根据 sys.getfilesystemencoding() 
    >>> # Wrte a file using a unicode filename
    >>> with open('jalape\xf1o.txt', 'w') as f:
    ... f.write('Spicy!')
    ...
    6 >
    >> # Directory listing (decoded)
    >>> import os
    >>> os.listdir('.')
    ['jalapeño.txt']
    >>> # Directory listing (raw)
    >>> os.listdir(b'.') # Note: byte string
    [b'jalapen\xcc\x83o.txt']
    >>> # Open file with raw filename
    >>> with open(b'jalapen\xcc\x83o.txt') as f:
    ... print(f.read())
    ...
    Spicy!
    >>>

15.打印不合法的文件名
    def bad_filename(filename):
        return repr(filename)[1:-1]
    try:
        print(filename)
    except UnicodeEncodeError:
        print(bad_filename(filename))
    """
    而另一方面，它又不能将这些文件名转换为正确的文本字符串。 
    Python对这个问题的解决方案是从文件名中获取未解码的字节值比如
    \xhh 并将它映射成Unicode字符 \udchh 表示的所谓的”代理编码”
    """
    def bad_filename(filename):
        temp = filename.encode(sys.getfilesystemencoding(), errors='surrogateescape')
        return temp.decode('latin-1')

16.增加或改变已打开文件的编码
	# 你想在不关闭一个已打开的文件前提下增加或改变它的Unicode编码
	如果你想给一个以二进制模式打开的文件添加Unicode编码/解码方式， 可以使用
	io.TextIOWrapper() 对象包装它
	import urllib.request
	import io

	u = urllib.request.urlopen('http://www.python.org')
	f = io.TextIOWrapper(u, encoding='utf-8')
	text = f.read()
	修改一个已经打开的文本模式的文件的编码方式，可以先使用 detach() 方法移
	除掉已存在的文本编码层， 并使用新的编码方式代替。
	>>> import sys
	>>> sys.stdout.encoding
	'UTF-8'
	>>> sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='latin-1')
	>>> sys.stdout.encoding
	'latin-1'
	>>>

	I/O系统由一系列的层次构建而成
	>>> f = open('sample.txt','w')
	>>> f
	<_io.TextIOWrapper name='sample.txt' mode='w' encoding='UTF-8'>
	>>> f.buffer
	<_io.BufferedWriter name='sample.txt'>
	>>> f.buffer.raw
	<_io.FileIO name='sample.txt' mode='wb'>
	在这个例子中， io.TextIOWrapper 是一个编码和解码Unicode的文本处理层，
	io.BufferedWriter 是一个处理二进制数据的带缓冲的I/O层， io.FileIO 是一个表示操作
	系统底层文件描述符的原始文件。
	detach() 方法会断开文件的最顶层并返回第二层，之后最顶层就没什么用了,尽管已经向你
	演示了改变编码的方法， 但是你还可以利用这种技术来改变文件行处理、错误机制以及文件
	处理的其他方面
	>>> sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='ascii',
	... errors='xmlcharrefreplace')
	>>> print('Jalape\u00f1o')
	Jalape&#241;o
	>>>

17.将字节写入文本文件
	"""
	I/O系统以层级结构的形式构建而成。 文本文件是通过在一个拥有缓冲的二进制模式文件
	上增加一个Unicode编码/解码层来创建。 buffer 属性指向对应的底层文件。如果你直接
	访问它的话就会绕过文本编码/解码层。
	"""
	>>> import sys
	>>> sys.stdout.write(b'Hello\n')
	Traceback (most recent call last):
	File "<stdin>", line 1, in <module>
	TypeError: must be str, not bytes
	>>> sys.stdout.buffer.write(b'Hello\n')
	Hello
	5 >
	>>

18.将文件描述符包装成文件对象
	# Open a low-level file descriptor
	import os
	fd = os.open('somefile.txt', os.O_WRONLY | os.O_CREAT)
	# Turn into a proper file
	f = open(fd, 'wt')
	f.write('hello world\n')
	f.close()

	# Create a file object, but don't close underlying fd when done
	f = open(fd, 'wt', closefd=False)
	...

19.创建临时文件和文件夹
	tempfile 模块中有很多的函数可以完成这任务。 为了创建一个匿名的临时文件，可以使
	用 tempfile.TemporaryFile ：
	from tempfile import TemporaryFile
	with TemporaryFile('w+t') as f:
		# Read/write to the file
		f.write('Hello World\n')
		f.write('Testing\n')
		# Seek back to beginning and read the data
		f.seek(0)
		data = f.read()
		# Temporary file is destroye

20.与串行端口的数据通信
    安装pySerial
    创建二进制编码的指令或数据包struct

21.序列化Python对象
	# pickle 是Python特有的并且附着在源码上，所有如果需要长期存储数据的时
	候不应该选用它。
	为了将一个对象转储为一个字符串，可以使用pickle.dump() pickle.dumps()
	为了从字节流中恢复一个对象，使用 picle.load() 或 pickle.loads() 函数
	"""
	pickle 是一种Python特有的自描述的数据编码。 通过自描述，被序列化后的
	数据包含每个对象开始和结束以及它的类型信息
	"""
	有些类型的对象是不能被序列化的。这些通常是那些依赖外部系统状态的对象， 比如打
	开的文件，网络连接，线程，进程，栈帧等等。 用户自定义类可以通过提供
	__getstate__() 和 __setstate__() 方法来绕过这些限制。 如果定义了这两个方
	法， pickle.dump() 就会调用 __getstate__() 获取序列化的对象。 类似
	的， __setstate__() 在反序列化时被调用
	# countdown.py
	import time
	import threading
	class Countdown:
		def __init__(self, n):
			self.n = n
			self.thr = threading.Thread(target=self.run)
			self.thr.daemon = True
			self.thr.start()
		def run(self):
			while self.n > 0:
				print('T-minus', self.n)
				self.n -= 1
				time.sleep(5)
		def __getstate__(self):
			return self.n
		def __setstate__(self, n):
			self.__init__(n)
	试着运行下面的序列化试验代码：
	>>> import countdown
	>>> c = countdown.Countdown(30)
	>>> T-minus 30
	T-minus 29
	T-minus 28
	...
	>>> # After a few moments
	>>> f = open('cstate.p', 'wb')
	>>> import pickle
	>>> pickle.dump(c, f)
	>>> f.close()
	然后退出Python解析器并重启后再试验下
	>>> f = open('cstate.p', 'rb')
	>>> pickle.load(f)
	countdown.Countdown object at 0x10069e2d0>
	T-minus 19
	T-minus 18
	...