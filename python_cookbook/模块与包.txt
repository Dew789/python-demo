1.构建一个模块的层级包
    封装成包是很简单的。在文件系统上组织你的代码，并确保每个目录都定义了一个
    __init__.py文件

    绝大部分时候让__init__.py空着就好。但是有些情况下可能包含代码。 举个例子，
    __init__.py能够用来自动加载子模块:
    # graphics/formats/__init__.py
    from . import jpg
    from . import png

2.控制模块被全部导入的内容
    尽管强烈反对使用 ‘from module import *‘,但是在定义了大量变量名的模块中频繁使用。
    如果你不做任何事,这样的导入将会导入所有不以下划线开头的
    在你的模块中定义一个变量 __all__ 来明确地列出需要导出的内容
    # somemodule.py
    def spam():
        pass
    def grok():
        pass
    blah = 42

    # Only export 'spam' and 'grok'
    __all__ = ['spam', 'grok']

3.使用相对路径名导入包中子模块
    这种语法只适用于import
    from . import grok # OK
    import .grok # ERROR
    最后，相对导入只适用于在合适的包中的模块。尤其是在顶层的脚本的简单模块中，它们
    将不起作用。如果包的部分被作为脚本直接执行，那它们将不起作用 例如
    % python3 mypackage/A/spam.py # Relative imports fail
    另一方面，如果你使用Python的-m选项来执行先前的脚本，相对导入将会正确运行。 例如：
    % python3 -m mypackage.A.spam # Relative imports work

4.将模块分割成多个文件
    你想将一个模块分割成多个文件。但是你不想将分离的文件统一成一个逻辑模块时使已有
    的代码遭到破坏
    # mymodule.py
    class A:
        def spam(self):
            print('A.spam')
    class B(A):
        def bar(self):
            print('B.bar')

    # a.py
    class A:
        def spam(self):
            print('A.spam')
    # b.py
    from .a import A
    class B(A):
        def bar(self):
            print('B.bar')
    # __init__.py
    from .a import A
    from .b import B

    # 延时引用
    def A():
        from .a import A
        return A()
    def B():
        from .b import B
        return B()

5.利用命名空间导入目录分散的代码
    # 包命名空间
    >>> import sys
    >>> sys.path.extend(['foo-package', 'bar-package'])
    >>> import spam.blah
    >>> import spam.grok
    一个包是否被作为一个包命名空间的主要方法是检查其__file__属性。如果没有，那包是个
    命名空间。这也可以由其字符表现形式中的“namespace”这个词体现出来
    >>> spam.__file__
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    AttributeError: 'module' object has no attribute '__file__'
    >>> spam
    <module 'spam' (namespace)>
    >>>

6.重新加载模块
    使用imp.reload()来重新加载先前加载的模块
    >>> import spam
    >>> import imp
    >>> imp.reload(spam)
    <module 'spam' from './spam.py'>
    >>>
    重新加载模块在开发和调试过程中常常很有用。但在生产环境中的代码使用会不安全
    >>> import imp
    >>> imp.reload(spam)
    <module 'spam' from './spam.py'>
    >>> spam.bar()
    bar
    >>> grok() # Notice old output
    grok
    >>> spam.grok() # Notice new output
    New grok
    >>>

7.运行目录或压缩文件
    如果你的应用程序已经有多个文件，你可以把你的应用程序放进它自己的目录并添加一个
    __main__.py文件
    myapplication/
        spam.py
        bar.py
        grok.py
        __main__.py
    bash % python3 myapplication
    # 或者打包成zip文件
    bash % ls
    spam.py bar.py grok.py __main__.py
    bash % zip -r myapp.zip *.py
    bash % python3 myapp.zip
    ... output from __main__.py ...

8.读取位于包中的数据文件
    mypackage/
        __init__.py
        somedata.dat
        spam.py

    # spam.py
    import pkgutil
    data = pkgutil.get_data(__package__, 'somedata.dat')

9.将文件夹加入到sys.path
	# sys.path是python的搜索模块的路径集，是一个list
	第一种，你可以使用PYTHONPATH环境变量来添加
	bash % env PYTHONPATH=/some/dir:/other/dir python3
	第二种方法是创建一个.pth文件，将目录列举出来，
	这个.pth文件需要放在某个Python的site-packages目录
	手动调节sys.path的值
	import sys
	sys.path.insert(0, '/some/dir')
	sys.path.insert(0, '/other/dir')
	为了避免硬编码，可以修改为
	import sys
	from os.path import abspath, join, dirname
	sys.path.insert(0, abspath(dirname('__file__'), 'src'))

10.通过字符串名导入模块
	使用importlib.import_module()函数来手动导入名字为字符串给出的
    一个模块或者包的一部分
    >>> import importlib
	>>> math = importlib.import_module('math')
	>>> math.sin(2)
	0.9092974268256817
	>>> mod = importlib.import_module('urllib.request')
	>>> u = mod.urlopen('http://www.python.org')
	# 相对导入
	import importlib
	# Same as 'from . import b'
	b = importlib.import_module('.b', __package__)